<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shutong ZHENG</title>
    <link>https://shutongzheng.github.io/posts/</link>
    <description>Recent content in Posts on Shutong ZHENG</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 25 Sep 2021 11:47:17 +0200</lastBuildDate><atom:link href="https://shutongzheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TD2</title>
      <link>https://shutongzheng.github.io/posts/pfa/td2/</link>
      <pubDate>Sat, 25 Sep 2021 11:47:17 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/pfa/td2/</guid>
      <description>Exo1 let f1 x g z = if x then g x else g z Correction:
bool -&amp;gt; (bool -&amp;gt; &#39;a) -&amp;gt; bool -&amp;gt; &#39;a let f2 f g x = if f x then g x Correction:
(&#39;a -&amp;gt; bool) -&amp;gt; (&#39;a -&amp;gt; unit) -&amp;gt; &#39;a -&amp;gt; unit let f3 g x y = if g x then g y elle n&#39;est pas bien typée. Parce que il n&#39;y pas de &amp;quot;else&amp;quot; let rec f4 x y = f4 y ([]::x) &#39;a list list -&amp;gt; &#39;a list list -&amp;gt; &#39;b 编译器不知道 会输出什么 所以就随便输出了个 &#39;b </description>
    </item>
    
    <item>
      <title>TP1</title>
      <link>https://shutongzheng.github.io/posts/system/tp1/</link>
      <pubDate>Wed, 22 Sep 2021 19:50:54 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/system/tp1/</guid>
      <description>Exo1 Q2 cut -d &amp;#39; &amp;#39; -f 2 demo.txt Q3 head -n 23 demo.txt | tail -n 9 Q4 cat demo.txt | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; Q5 cat demo.txt | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | sort | uniq -c Q6 grep -c &amp;#34;ABC&amp;#34; demo.txt Q7 grep &amp;#39;^[A-Z]&amp;#39; demo.txt Exo2 Q1 grep &amp;#34;Restauration&amp;#34; entreprise.txt &amp;gt; restauration.txt Q2 grep &amp;#34;^94&amp;#34; entreprise.txt Q3 grep &amp;#34;^91&amp;#34; -c entreprise.txt Q4 cut -d &amp;#39;:&amp;#39; -f 2 entreprise.</description>
    </item>
    
    <item>
      <title>TD1</title>
      <link>https://shutongzheng.github.io/posts/pfa/td1/</link>
      <pubDate>Sat, 18 Sep 2021 16:37:14 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/pfa/td1/</guid>
      <description>Exo1 给出下列表达式的类型
fun x -&amp;gt; x + 1 fun x y -&amp;gt; x *. y fun x (y, z) -&amp;gt; if x then y else not z fun x -&amp;gt; x fun x y z -&amp;gt; (x &amp;lt;= y, z) Correction:
int -&amp;gt; int float -&amp;gt; float -&amp;gt; float bool -&amp;gt; (bool * bool) -&amp;gt; bool &#39;a -&amp;gt; &#39;a &#39;a -&amp;gt; &#39;a -&amp;gt; &#39;b -&amp;gt; (bool * &#39;b) Exo2 给出 \(mystere\ 3\) 的结果</description>
    </item>
    
    <item>
      <title>TD1</title>
      <link>https://shutongzheng.github.io/posts/logique/td1/</link>
      <pubDate>Thu, 09 Sep 2021 16:39:10 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/logique/td1/</guid>
      <description>Exo 1 La contraposée d&amp;rsquo;une formule P ⇒ Q est la formule ¬Q ⇒ ¬P, la réciproque est la formule Q ⇒ P, la contraposée de la réciproque est la formule ¬P ⇒ ¬Q.
Q1 1. P ⇒ Q Si&#39;l est midi, alors j&#39;ai faim. 2. ¬Q ⇒ ¬P Si je n&#39;ai pas faim, alors il n&#39;est pas midi. 3. Q ⇒ P Si j&#39;ai faim, alors il est midi. 4.</description>
    </item>
    
    <item>
      <title>Cours_1 </title>
      <link>https://shutongzheng.github.io/posts/logique/cours_1/</link>
      <pubDate>Sun, 05 Sep 2021 21:11:36 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/logique/cours_1/</guid>
      <description>Maitriser le langage logique 形式语言 (Langage formel) 用逻辑语言写成的陈述句 (énoncé) 将被称为形式 (formule)
使用形式语言来编写公式, 避免自然语言的歧义和不准确的定义 形式语言比自然语言有更少的冗余, 更容易学习, 更容易实现
原子公式 (Formule atomique) 复合公式 (Formules complexes) 复合公式由原子公式和逻辑运算符组成
¬ P la négation d’une formule, 读作 “non P” P ∧ Q la conjonction de deux formules, 读作 “P et Q” P ∨ Q la disjonction de deux formules, 读作 “P ou Q” P ⇒ Q l’implication de deux formules, 读作 “P implique Q”
∀ x, P 全称量化(la quantification universelle), prononcée “ pour tout x, P” ∃ x, P 存在量化(la quantification existentielle), prononcée “ il existe x tel que P”</description>
    </item>
    
    <item>
      <title>Cours_0</title>
      <link>https://shutongzheng.github.io/posts/logique/cours_0/</link>
      <pubDate>Fri, 03 Sep 2021 14:44:29 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/logique/cours_0/</guid>
      <description>逻辑,真相之路 Logique 是来自于希腊语 logos(理由,语言,推理)
陈述 (Enoncés) 逻辑操作陈述句&amp;mdash;&amp;mdash;&amp;gt;陈述句是表达的意思是 真或假
ex. “所有的羊都有5条腿” “没有学生在逻辑课上玩手机”
反例:
“亨利四世白马的颜色”
推理 (Raisonnement) 推理是一个过程(一个演绎, 一个证明), 它可以将它们(假设, 结论)之间的陈述联系起来
Tous les hommes sont mortels or Socrate est un homme donc Socrate est mortel.
or 三段论中用于引出小前提
donc 引出结论
逻辑混乱 (Chaos de la logique) 三段论(le syllogisme)
三段论由主句、从句和结论组成
证明 (Démonstration) 在本课程中需要严谨的证明方法并且能在计算机上执行
数理逻辑 (Meta-mathématique) 在数理逻辑中, 数学陈述、推理是研究的对象, 例如代数中的数字、分析中的函数、向量空间
逻辑和计算机 运用:
布尔计算和逻辑电路之间的关系 人工智能: 会计算的计算机具备推理能力, 这就需要将推理转化为计算 建模工具: 数据库和程序开发（软件工程）领域</description>
    </item>
    
    <item>
      <title>Processing 基础简要</title>
      <link>https://shutongzheng.github.io/posts/windows/0x00000005/</link>
      <pubDate>Tue, 26 Jan 2021 09:25:55 +0100</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/windows/0x00000005/</guid>
      <description>DEMO</description>
    </item>
    
    <item>
      <title>MFC SDI 实现多视图切换</title>
      <link>https://shutongzheng.github.io/posts/windows/0x00000004/</link>
      <pubDate>Wed, 20 Jan 2021 05:20:09 +0100</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/windows/0x00000004/</guid>
      <description>在MFC SDI中视图切换是重要的一环
原理：
在App类的初始化函数中 定义需要切换的窗口，并在App类中添加自定义函数（进行多视图切换）
步骤：
 在App类头文件，定义  private: CView* m_pOldView; CView* m_pNewView; public: CView* SwitchView(); 在App类的 InitInstance() 函数中添加以下代码 （源于Windows官方文档）   //用于获取当前视图的指针 CView *pActiveView = ((CFrameWnd *)m_pMainWnd)-&amp;gt;GetActiveView(); m_pOldView = pActiveView; m_pNewView = (CView *)new CNewView; if (NULL == m_pNewView) return FALSE; CDocument *pCurrentDoc = ((CFrameWnd *)m_pMainWnd)-&amp;gt;GetActiveDocument(); // Initialize a CCreateContext to point to the active document. // With this context, the new view is added to the document // when the view is created in CView::OnCreate().</description>
    </item>
    
    <item>
      <title>MFC 文档类 获取各视图类指针</title>
      <link>https://shutongzheng.github.io/posts/windows/0x00000003/</link>
      <pubDate>Wed, 20 Jan 2021 04:45:05 +0100</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/windows/0x00000003/</guid>
      <description>在MFC中，可以通过文档类（CDocument Class）对每一视图类进行视图指针获取
CDocument 中包含两个重要的函数 CDocument::GetFirstViewPosition 和 CDocument::GetNextView
virtual POSITION GetFirstViewPosition() const; 返回 第一个视图类位置 POSITIION
virtual CView* GetNextView(POSITION&amp;amp; rPosition) const; 返回 当前 POSITION 的视图类指针
原理:
对于SDI，每一个视图类都会绑定一个CDocument类，所以可以在通过遍历CDocument类中所有的视图类，以便寻取需要的某一视图类指针。
在CDocument类添加函数 CView* GetView(CRuntimeClass* pClass)
/** * @作用 通过遍历CDocument类中所有的视图类，以便寻取需要的某一视图类指针 * @参数 CRuntimeClass* pClass 寻求的视图类 * @返回 pClass 对应的视图类指针 */ CView* GetView(CRuntimeClass* pClass){ CView* pView = NULL; POSITION pos = GetFirstViewPosition(); while(pos != NULL){ pView = GetNextView(pos); if(pView-&amp;gt;IsKindOf(pClass)) break; } return pView; } 在除App类外，可以调用CDocument类的 GetView 函数，获取需要的视图指针</description>
    </item>
    
    <item>
      <title>Uml</title>
      <link>https://shutongzheng.github.io/posts/windows/0x00000002/</link>
      <pubDate>Mon, 18 Jan 2021 14:37:25 +0100</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/windows/0x00000002/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 的 std::ref 用法</title>
      <link>https://shutongzheng.github.io/posts/windows/0x00000001/</link>
      <pubDate>Sun, 17 Jan 2021 02:11:56 +0100</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/windows/0x00000001/</guid>
      <description>C++11中引用 std::ref , 是为了解决一些参数传参问题
主要解决以下两类问题：
 解决函数式编程传参问题，函数式编程的参数是对参数进行拷贝，而不是引用。（函数式编程的参数如果带&amp;amp;时，传参时必须用ref）  void f(int&amp;amp; n1, int&amp;amp; n2, const int&amp;amp; n3) //cref const的引用 { cout &amp;lt;&amp;lt;&amp;quot;4:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; ++n1; ++n2; cout &amp;lt;&amp;lt;&amp;quot;5:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; } int main (void){ int n1 = 1, n2 = 2, n3 = 3; cout &amp;lt;&amp;lt;&amp;quot;1:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; std::function&amp;lt;void()&amp;gt; bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3)); cout &amp;lt;&amp;lt;&amp;quot;2:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; n1 = 10; n2 = 11; n3 = 12; cout &amp;lt;&amp;lt;&amp;quot;3:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; bound_f(); cout &amp;lt;&amp;lt;&amp;quot;6:&amp;quot;&amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt;endl; return 0; } 结果:</description>
    </item>
    
  </channel>
</rss>

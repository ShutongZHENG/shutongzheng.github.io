<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TP on Shutong ZHENG</title>
    <link>https://shutongzheng.github.io/tags/tp/</link>
    <description>Recent content in TP on Shutong ZHENG</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 19 Oct 2021 11:52:28 +0200</lastBuildDate><atom:link href="https://shutongzheng.github.io/tags/tp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TP3</title>
      <link>https://shutongzheng.github.io/posts/system/tp3/</link>
      <pubDate>Tue, 19 Oct 2021 11:52:28 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/system/tp3/</guid>
      <description>Lecteurs-ecrivains Q1 satisfaites : C1 pas satisfaites : C2 , C3
Q2 une section critique
dans cette premiere version un seul lecteur est autoriser a acceder a la base en meme temps
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;pthread.h&amp;gt;pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; void lire() { printf(&amp;#34;lire debut\n&amp;#34;); usleep(rand() % 500000); printf(&amp;#34;lire fin\n&amp;#34;); } void ecrire() { printf(&amp;#34;ecrire debut\n&amp;#34;); usleep(rand() % 500000); printf(&amp;#34;ecrire fin\n&amp;#34;); } void *run(void *arg) { while (1) { if ((rand() % 2) == 0) { pthread_mutex_lock(&amp;amp;mutex); lire(); pthread_mutex_unlock(&amp;amp;mutex); } else { pthread_mutex_lock(&amp;amp;mutex); ecrire(); pthread_mutex_unlock(&amp;amp;mutex); } } } int main() { int N = 4; pthread_t T[N]; for (int i = 0; i &amp;lt; N; i++) pthread_create(&amp;amp;T[i], NULL, run, NULL); for (int i = 0; i &amp;lt; N; i++) pthread_join(T[i], NULL); return 0; } Q3 #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>TP2</title>
      <link>https://shutongzheng.github.io/posts/system/tp2/</link>
      <pubDate>Tue, 05 Oct 2021 16:41:06 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/system/tp2/</guid>
      <description>Diagramme de Gantt Q1 gantt title Lâ€˜ordonnancement FIFO non preemptif dateFormat s axisFormat %S P1: 0 , 8 P2: 8 , 9 P3: 9 , 11 P4: 11 , 17 P5: 17 , 18 \( \frac {0+8+7+7+11} {5} = 6.6 s\)
Q2 gantt title L&#39;ordonnancement par priorite preemptif dateFormat s axisFormat %S P1: 0 , 4 P4: 4 , 10 P5: 10 , 11 P1: 11 , 15 P2: 15 , 16 P3: 16, 18 \( \frac {7+15+14+4}{5} = 8 s\)</description>
    </item>
    
    <item>
      <title>TP1</title>
      <link>https://shutongzheng.github.io/posts/system/tp1/</link>
      <pubDate>Wed, 22 Sep 2021 19:50:54 +0200</pubDate>
      
      <guid>https://shutongzheng.github.io/posts/system/tp1/</guid>
      <description>Exo1 Q2 cut -d &amp;#39; &amp;#39; -f 2 demo.txt Q3 head -n 23 demo.txt | tail -n 9 Q4 cat demo.txt | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; Q5 cat demo.txt | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | sort | uniq -c Q6 grep -c &amp;#34;ABC&amp;#34; demo.txt Q7 grep &amp;#39;^[A-Z]&amp;#39; demo.txt Exo2 Q1 grep &amp;#34;Restauration&amp;#34; entreprise.txt &amp;gt; restauration.txt Q2 grep &amp;#34;^94&amp;#34; entreprise.txt Q3 grep &amp;#34;^91&amp;#34; -c entreprise.txt Q4 cut -d &amp;#39;:&amp;#39; -f 2 entreprise.</description>
    </item>
    
  </channel>
</rss>
